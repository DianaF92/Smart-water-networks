function [trainInd,valInd,testInd,remainingInd] = dividealternate(Q,trainNum,valNum,testNum)

%Partition indices into three sets iteratively assigning trainNum indices to training, valNum indices to validation and testNum indices to test. In case the number of indices is not integer, a round() operation will be applied.
% Input:
% Q: number of total indices to be divided.
% trainNum: number of consecutive indices to be  assigned to training set.
% valNum: number of consecutive indices to be  assigned to validation set.
% testNum: number of consecutive indices to be  assigned to test set.
% Output:
% trainInd: training set indexes.
% valInd: validation set indexes.
% testInd: test set indexes.
% remainingInd: indexes not used

trainNum=round(trainNum);
valNum=round(valNum);
testNum=round(testNum);

idxTr=1:trainNum;
idxVal=trainNum+1:trainNum+1+valNum-1;
idxTest=trainNum+1+valNum:trainNum+1+valNum+testNum-1;
    
current_idx=0;

totidx=trainNum+valNum+testNum;
maxiter=Q/totidx;

trainInd=[];
valInd=[];
testInd=[];
for i=1:maxiter
    trainInd=[trainInd current_idx+idxTr];
    valInd=[valInd current_idx+idxVal];
    testInd=[testInd current_idx+idxTest];
    current_idx=totidx*i;
end

remainingInd=current_idx+1:Q;

if length(remainingInd)>=trainNum && trainNum>0
    trainInd=[trainInd remainingInd(1:trainNum)];
    remainingInd(1:trainNum)=[];
    if length(remainingInd)>=valNum && valNum>0
        valInd=[valInd remainingInd(1:valNum)];
        remainingInd(1:valNum)=[];
    end
end




function [IdentificationDataset,ValidationDataset,TestDataset] = splitDataset(Dataset,trainInd,valInd,testInd,doPlots)

%Splits Dataset into Identification and Validation according to the selected method
%Input:
% trainInd: training set indexes.
% valInd: validation set indexes.
% testInd: test set indexes.
%Output:
%IdentificationDataset:struct with fields Phi (regressor matrix),Y (dependent variable vector), time
%ValidationDataset:struct with fields Phi (regressor matrix),Y (dependent variable vector), time
%TestDataset:struct with fields Phi (regressor matrix),Y (dependent variable vector), time

if doPlots
    figure()
    legenda={};
    hold on
end

if ~isempty(trainInd)
    IdentificationDataset.Phi=Dataset.Phi(trainInd,:);
    IdentificationDataset.Y=Dataset.Y(trainInd,:);
    IdentificationDataset.time=Dataset.time(trainInd);
    if doPlots
        dateore=datetime(datestr(IdentificationDataset.time));
        plot(dateore,IdentificationDataset.Y)
        legenda{end+1}='Identification';
    end
else
    IdentificationDataset.Phi=[];
    IdentificationDataset.Y=[];
    IdentificationDataset.time=[];
end

if ~isempty(valInd)
    ValidationDataset.Phi=Dataset.Phi(valInd,:);
    ValidationDataset.Y=Dataset.Y(valInd,:);
    ValidationDataset.time=Dataset.time(valInd);
    if doPlots
        dateore=datetime(datestr(ValidationDataset.time));
        plot(dateore,ValidationDataset.Y)
        legenda{end+1}='Validation';
    end
else
    ValidationDataset.Phi=[];
    ValidationDataset.Y=[];
    ValidationDataset.time=[];
end
if ~isempty(testInd)
    TestDataset.Phi=Dataset.Phi(testInd,:);
    TestDataset.Y=Dataset.Y(testInd,:);
    TestDataset.time=Dataset.time(testInd);
    if doPlots
        dateore=datetime(datestr(TestDataset.time));
        plot(dateore,TestDataset.Y);
        legenda{end+1}='Test';
    end
else
    TestDataset.Phi=[];
    TestDataset.Y=[];
    TestDataset.time=[];
end

if ~isempty(trainInd) && ~isempty(valInd)
    if size(IdentificationDataset.Phi,1)<size(IdentificationDataset.Phi,2)
        warning('Condizione di IdentificabilitÃ  non rispettata')
    end
end

if doPlots
    legend(legenda)
    grid on
end
end




function [MatrioskaModels] = stepwiseRegression(IdentificationDataset,ValidationDataset,maxOrder,doPlots)

%Forward stepwise regression based on Fisher's test on validation data to stop adding regressors.
%Input:
%IdentificationDataset:struct with fields Phi and Y
%ValidationDataset:struct with fields Phi and Y
%maxOrder: maximum order of the model
%Output:
%MatrioskaModels: struct array with fields
%     RegressorsIndexes=indexes of chosen regressors (in order of addition to the model)
%     ThetaLs=coefficients of LS estimated model (ordered according to RegressorsIndexes order)
%     R2=R squared for the model prediction in the validation dataset

if isempty(maxOrder) 
    maxOrder=Inf;
end
if isempty(ValidationDataset) || isempty(ValidationDataset.Phi) || isempty(ValidationDataset.Y) 
    ValidationDataset=IdentificationDataset;
    warning('ValidationDataset automatically set equal to IdentificationDataset')
end

%%

MatrioskaModels=struct(); %Creates an empty structure.
modelOrder=0;

RegIndexes=1:size(IdentificationDataset.Phi,2);
ChosenRegIndexes=[];

%%
F=finv(0.95,1,length(ValidationDataset.Y)-1); %Inverse of the F cumulative distribution function. X=finv(P,V1,V2) returns the inverse of the F distribution function with V1 and V2 degrees of freedom, at the values in P.
RemReg=IdentificationDataset.Phi;
RemReg_CrossVal=ValidationDataset.Phi;
ChosenReg=[];
ChosenReg_CrossVal=[];
TestReg=[];
oldSSR=inf;
cicla=true;
R2=[];
while cicla
    SSR=[];
    for i=1:size(RemReg,2)
        TestReg= [ChosenReg RemReg(:,i)]; 
        Theta=TestReg\IdentificationDataset.Y;
        Yp=TestReg*Theta;
        eps=IdentificationDataset.Y-Yp;
        SSR=[SSR;sum(eps.^2)]; 
    end
    
    j=find(SSR==min(SSR));
    
    ChosenReg=[ChosenReg RemReg(:,j)];
    Theta=ChosenReg\IdentificationDataset.Y;
    Yp=ChosenReg*Theta;

    R2_id=rsquare(IdentificationDataset.Y,Yp);
    
    %crossvalidation
    ChosenReg_CrossVal=[ChosenReg_CrossVal RemReg_CrossVal(:,j)];
    Yp=ChosenReg_CrossVal*Theta;
    
    newSSR=sum((ValidationDataset.Y-Yp).^2);
    f=(length(ValidationDataset.Y)-size(ChosenReg_CrossVal,2))*(oldSSR-newSSR)/newSSR;
  
%To stop adding regressors choose whether you want to apply the Fisher's test or to set the maximum model order 

%     if f>=F  %Application of the Fisher's test
         
        RemReg(:,j)=[];
        RemReg_CrossVal(:,j)=[];
        
        oldSSR=newSSR;
        ChosenRegIndexes(end+1)=RegIndexes(j);
        RegIndexes(j)=[];

        R2_val = rsquare(ValidationDataset.Y,Yp);
        modelOrder=modelOrder+1;
%           
        MatrioskaModels(modelOrder).RegressorsIndexes=ChosenRegIndexes';
        MatrioskaModels(modelOrder).ThetaLS=Theta;
        MatrioskaModels(modelOrder).R2identification=R2_id;
        MatrioskaModels(modelOrder).R2validation=R2_val;
%         
        if doPlots
        figure()
        plot(ValidationDataset.Y,Yp,'o')
        hold on
        plot(ValidationDataset.Y,ValidationDataset.Y,'-')
        hold off
        title({['Order=',num2str(modelOrder)];['R^2 validation=',num2str(R2)]})
        end
%         
        if modelOrder>=maxOrder
            cicla=false;
            warning('MaxOrder reached!')
        end
%         
        modelOrder
%                 
    if modelOrder==100  %Setting the maximum model order
        ChosenReg=ChosenReg(:,1:end-1);
        ChosenReg_CrossVal=ChosenReg_CrossVal(:,1:end-1);
        cicla=false;
    end
 
    
    
end

if doPlots
plotMatrioskaModelsR2(MatrioskaModels)
end




function [ MatrioskaModels ] = checkMatrioskaModelsCoefficientPositivity(MatrioskaModels)

%Verify that the coefficients of MatrioskaModels are non-negative
%Input:
%MatrioskaModels: see "stepwiseRegression" function.
% Output:
% MatrioskaModels: with coefficient non-negativity flag added for each
% model.

for i=1:length(MatrioskaModels)
    if sum(MatrioskaModels(i).ThetaLS<0)>0
        MatrioskaModels(i).Warnings='Negative Coefficients!'
        warning('Negative Coefficients!')
    else
        MatrioskaModels(i).Warnings='';
    end
end
end




function [MatrioskaModels] = testMatrioskaModels( MatrioskaModels, TestDataset, doPlots )
)
%Test the mattrioska models on the test dataset and save the performance metrics (R^2)
% Input:
% MatrioskaModels: see "stepwiseRegression" function
% TestDataset: structure with Phi (regressor matrix),Y (dependent variable vector)
% doPlots: to generate plots
% Output:
% MatrioskaModels: with performance metrics (R^2) field added for each model for the test dataset.

%%
for i=1:length(MatrioskaModels)
    
ModelloSW=MatrioskaModels(i);
modelOrder=length(ModelloSW.ThetaLS);

Yp=TestDataset.Phi(:,ModelloSW.RegressorsIndexes)*ModelloSW.ThetaLS;

R2test=rsquare(TestDataset.Y,Yp);
MatrioskaModels(i).R2test=R2test;

if doPlots
    figure()
    plot(TestDataset.Y,Yp,'ob')
    hold on
    plot(TestDataset.Y,TestDataset.Y,'-r')
    hold off
    title({['Order=',num2str(modelOrder)];['R^2 test=',num2str(R2test)]})
    grid on
end

end

end




function plotMatrioskaModelsR2(MatrioskaModels)

%Plot the trend of R^2 for the MatrioskaModels in identification,validation, test dataset.
% Input:
% MatrioskaModels: see "stepwiseRegression" function

plot([MatrioskaModels.R2identification],':k','LineWidth',1)
legenda={'Identification'};

if ~isempty([MatrioskaModels.R2validation])
hold on
plot([MatrioskaModels.R2validation],'--k','LineWidth',1)
legenda{end+1}='Validation';
end
if ~isempty([MatrioskaModels.R2test])
hold on
plot([MatrioskaModels.R2test],'-k','LineWidth',1)
legenda{end+1}='Whole dataset';
end

xlabel('n')
ylabel('R^2')

legend(legenda,'Location','southeast')
grid on

end

